Terminals unused in grammar

   _VOID


Grammar

    0 $accept: program $end

    1 program: global_list function_list

    2 global_list: %empty
    3            | global_list global_var

    4 global_var: _TYPE _ID _SEMICOLON

    5 function_list: function
    6              | function_list function

    7 $@1: %empty

    8 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    9 parameter: %empty
   10          | _TYPE _ID
   11          | parameter _COMMA _TYPE _ID

   12 $@2: %empty

   13 body: _LBRACKET variable_list $@2 statement_list _RBRACKET

   14 variable_list: %empty
   15              | variable_list variable

   16 $@3: %empty

   17 variable: _TYPE $@3 _ID vars _SEMICOLON

   18 vars: %empty
   19     | vars _COMMA _ID
   20     | vars _COMMA _ID _ASSIGN literal
   21     | _ASSIGN literal

   22 $@4: %empty

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement

   24 $@5: %empty

   25 jiro: _JIRO _ID $@5 tranga _TOERANA statement _END_JIRO

   26 tranga: _TRANGA literal statement
   27       | tranga _TRANGA literal statement

   28 statement_list: %empty
   29               | statement_list statement

   30 statement: compound_statement
   31          | assignment_statement
   32          | if_statement
   33          | return_statement
   34          | inc_statement
   35          | dec_statement
   36          | for
   37          | jiro

   38 inc_statement: _ID _INC _SEMICOLON

   39 dec_statement: _DEC _ID _SEMICOLON

   40 compound_statement: _LBRACKET statement_list _RBRACKET

   41 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   42 num_exp: exp
   43        | num_exp _AROP exp

   44 exp: literal
   45    | _ID
   46    | function_call
   47    | _LPAREN num_exp _RPAREN
   48    | _ID _INC
   49    | _DEC _ID
   50    | _LPAREN rel_exp _RPAREN _QMARK izraz _COLON izraz

   51 izraz: literal
   52      | _ID

   53 literal: _INT_NUMBER
   54        | _UINT_NUMBER

   55 $@6: %empty

   56 function_call: _ID $@6 _LPAREN argument _RPAREN

   57 argument: %empty
   58         | num_exp

   59 if_statement: if_part
   60             | if_part _ELSE statement

   61 @7: %empty

   62 $@8: %empty

   63 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN statement

   64 rel_exp: num_exp _RELOP num_exp

   65 return_statement: _RETURN num_exp _SEMICOLON
   66                 | _RETURN _SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 4 8 10 11 17 23
_IF (259) 63
_ELSE (260) 60
_RETURN (261) 65 66
_ID (262) 4 8 10 11 17 19 20 23 25 38 39 41 45 48 49 52 56
_INT_NUMBER (263) 53
_UINT_NUMBER (264) 54
_LPAREN (265) 8 23 47 50 56 63
_RPAREN (266) 8 23 47 50 56 63
_LBRACKET (267) 13 40
_RBRACKET (268) 13 40
_ASSIGN (269) 20 21 23 41
_SEMICOLON (270) 4 17 38 39 41 65 66
_AROP (271) 43
_RELOP (272) 64
_INC (273) 38 48
_DEC (274) 39 49
_COMMA (275) 11 19 20
_VOID (276)
_COLON (277) 23 50
_STEP (278) 23
_FOR (279) 23
_JIRO (280) 25
_TRANGA (281) 26 27
_TOERANA (282) 25
_END_JIRO (283) 25
_QMARK (284) 50
ONLY_IF (285)


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
global_list (33)
    on left: 2 3, on right: 1 3
global_var (34)
    on left: 4, on right: 3
function_list (35)
    on left: 5 6, on right: 1 6
function (36)
    on left: 8, on right: 5 6
$@1 (37)
    on left: 7, on right: 8
parameter (38)
    on left: 9 10 11, on right: 8 11
body (39)
    on left: 13, on right: 8
$@2 (40)
    on left: 12, on right: 13
variable_list (41)
    on left: 14 15, on right: 13 15
variable (42)
    on left: 17, on right: 15
$@3 (43)
    on left: 16, on right: 17
vars (44)
    on left: 18 19 20 21, on right: 17 19 20
for (45)
    on left: 23, on right: 36
$@4 (46)
    on left: 22, on right: 23
jiro (47)
    on left: 25, on right: 37
$@5 (48)
    on left: 24, on right: 25
tranga (49)
    on left: 26 27, on right: 25 27
statement_list (50)
    on left: 28 29, on right: 13 29 40
statement (51)
    on left: 30 31 32 33 34 35 36 37, on right: 23 25 26 27 29 60 63
inc_statement (52)
    on left: 38, on right: 34
dec_statement (53)
    on left: 39, on right: 35
compound_statement (54)
    on left: 40, on right: 30
assignment_statement (55)
    on left: 41, on right: 31
num_exp (56)
    on left: 42 43, on right: 41 43 47 58 64 65
exp (57)
    on left: 44 45 46 47 48 49 50, on right: 42 43
izraz (58)
    on left: 51 52, on right: 50
literal (59)
    on left: 53 54, on right: 20 21 23 26 27 44 51
function_call (60)
    on left: 56, on right: 46
$@6 (61)
    on left: 55, on right: 56
argument (62)
    on left: 57 58, on right: 56
if_statement (63)
    on left: 59 60, on right: 32
if_part (64)
    on left: 63, on right: 59 60
@7 (65)
    on left: 61, on right: 63
$@8 (66)
    on left: 62, on right: 63
rel_exp (67)
    on left: 64, on right: 50 63
return_statement (68)
    on left: 65 66, on right: 33


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (global_list)

    program      go to state 1
    global_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: global_list . function_list
    3 global_list: global_list . global_var

    _TYPE  shift, and go to state 4

    global_var     go to state 5
    function_list  go to state 6
    function       go to state 7


State 3

    0 $accept: program $end .

    $default  accept


State 4

    4 global_var: _TYPE . _ID _SEMICOLON
    8 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 8


State 5

    3 global_list: global_list global_var .

    $default  reduce using rule 3 (global_list)


State 6

    1 program: global_list function_list .
    6 function_list: function_list . function

    _TYPE  shift, and go to state 9

    $default  reduce using rule 1 (program)

    function  go to state 10


State 7

    5 function_list: function .

    $default  reduce using rule 5 (function_list)


State 8

    4 global_var: _TYPE _ID . _SEMICOLON
    8 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    _SEMICOLON  shift, and go to state 11

    $default  reduce using rule 7 ($@1)

    $@1  go to state 12


State 9

    8 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 13


State 10

    6 function_list: function_list function .

    $default  reduce using rule 6 (function_list)


State 11

    4 global_var: _TYPE _ID _SEMICOLON .

    $default  reduce using rule 4 (global_var)


State 12

    8 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 14


State 13

    8 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 7 ($@1)

    $@1  go to state 12


State 14

    8 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    _TYPE  shift, and go to state 15

    $default  reduce using rule 9 (parameter)

    parameter  go to state 16


State 15

   10 parameter: _TYPE . _ID

    _ID  shift, and go to state 17


State 16

    8 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body
   11 parameter: parameter . _COMMA _TYPE _ID

    _RPAREN  shift, and go to state 18
    _COMMA   shift, and go to state 19


State 17

   10 parameter: _TYPE _ID .

    $default  reduce using rule 10 (parameter)


State 18

    8 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 20

    body  go to state 21


State 19

   11 parameter: parameter _COMMA . _TYPE _ID

    _TYPE  shift, and go to state 22


State 20

   13 body: _LBRACKET . variable_list $@2 statement_list _RBRACKET

    $default  reduce using rule 14 (variable_list)

    variable_list  go to state 23


State 21

    8 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 8 (function)


State 22

   11 parameter: parameter _COMMA _TYPE . _ID

    _ID  shift, and go to state 24


State 23

   13 body: _LBRACKET variable_list . $@2 statement_list _RBRACKET
   15 variable_list: variable_list . variable

    _TYPE  shift, and go to state 25

    $default  reduce using rule 12 ($@2)

    $@2       go to state 26
    variable  go to state 27


State 24

   11 parameter: parameter _COMMA _TYPE _ID .

    $default  reduce using rule 11 (parameter)


State 25

   17 variable: _TYPE . $@3 _ID vars _SEMICOLON

    $default  reduce using rule 16 ($@3)

    $@3  go to state 28


State 26

   13 body: _LBRACKET variable_list $@2 . statement_list _RBRACKET

    $default  reduce using rule 28 (statement_list)

    statement_list  go to state 29


State 27

   15 variable_list: variable_list variable .

    $default  reduce using rule 15 (variable_list)


State 28

   17 variable: _TYPE $@3 . _ID vars _SEMICOLON

    _ID  shift, and go to state 30


State 29

   13 body: _LBRACKET variable_list $@2 statement_list . _RBRACKET
   29 statement_list: statement_list . statement

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _RBRACKET  shift, and go to state 35
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 41
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 30

   17 variable: _TYPE $@3 _ID . vars _SEMICOLON

    _ASSIGN  shift, and go to state 49

    $default  reduce using rule 18 (vars)

    vars  go to state 50


State 31

   63 if_part: _IF . _LPAREN @7 rel_exp $@8 _RPAREN statement

    _LPAREN  shift, and go to state 51


State 32

   65 return_statement: _RETURN . num_exp _SEMICOLON
   66                 | _RETURN . _SEMICOLON

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _SEMICOLON    shift, and go to state 56
    _DEC          shift, and go to state 57

    num_exp        go to state 58
    exp            go to state 59
    literal        go to state 60
    function_call  go to state 61


State 33

   38 inc_statement: _ID . _INC _SEMICOLON
   41 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 62
    _INC     shift, and go to state 63


State 34

   40 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 28 (statement_list)

    statement_list  go to state 64


State 35

   13 body: _LBRACKET variable_list $@2 statement_list _RBRACKET .

    $default  reduce using rule 13 (body)


State 36

   39 dec_statement: _DEC . _ID _SEMICOLON

    _ID  shift, and go to state 65


State 37

   23 for: _FOR . _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement

    _LPAREN  shift, and go to state 66


State 38

   25 jiro: _JIRO . _ID $@5 tranga _TOERANA statement _END_JIRO

    _ID  shift, and go to state 67


State 39

   36 statement: for .

    $default  reduce using rule 36 (statement)


State 40

   37 statement: jiro .

    $default  reduce using rule 37 (statement)


State 41

   29 statement_list: statement_list statement .

    $default  reduce using rule 29 (statement_list)


State 42

   34 statement: inc_statement .

    $default  reduce using rule 34 (statement)


State 43

   35 statement: dec_statement .

    $default  reduce using rule 35 (statement)


State 44

   30 statement: compound_statement .

    $default  reduce using rule 30 (statement)


State 45

   31 statement: assignment_statement .

    $default  reduce using rule 31 (statement)


State 46

   32 statement: if_statement .

    $default  reduce using rule 32 (statement)


State 47

   59 if_statement: if_part .
   60             | if_part . _ELSE statement

    _ELSE  shift, and go to state 68

    $default  reduce using rule 59 (if_statement)


State 48

   33 statement: return_statement .

    $default  reduce using rule 33 (statement)


State 49

   21 vars: _ASSIGN . literal

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 69


State 50

   17 variable: _TYPE $@3 _ID vars . _SEMICOLON
   19 vars: vars . _COMMA _ID
   20     | vars . _COMMA _ID _ASSIGN literal

    _SEMICOLON  shift, and go to state 70
    _COMMA      shift, and go to state 71


State 51

   63 if_part: _IF _LPAREN . @7 rel_exp $@8 _RPAREN statement

    $default  reduce using rule 61 (@7)

    @7  go to state 72


State 52

   45 exp: _ID .
   48    | _ID . _INC
   56 function_call: _ID . $@6 _LPAREN argument _RPAREN

    _INC  shift, and go to state 73

    _LPAREN   reduce using rule 55 ($@6)
    $default  reduce using rule 45 (exp)

    $@6  go to state 74


State 53

   53 literal: _INT_NUMBER .

    $default  reduce using rule 53 (literal)


State 54

   54 literal: _UINT_NUMBER .

    $default  reduce using rule 54 (literal)


State 55

   47 exp: _LPAREN . num_exp _RPAREN
   50    | _LPAREN . rel_exp _RPAREN _QMARK izraz _COLON izraz

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _DEC          shift, and go to state 57

    num_exp        go to state 75
    exp            go to state 59
    literal        go to state 60
    function_call  go to state 61
    rel_exp        go to state 76


State 56

   66 return_statement: _RETURN _SEMICOLON .

    $default  reduce using rule 66 (return_statement)


State 57

   49 exp: _DEC . _ID

    _ID  shift, and go to state 77


State 58

   43 num_exp: num_exp . _AROP exp
   65 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 78
    _AROP       shift, and go to state 79


State 59

   42 num_exp: exp .

    $default  reduce using rule 42 (num_exp)


State 60

   44 exp: literal .

    $default  reduce using rule 44 (exp)


State 61

   46 exp: function_call .

    $default  reduce using rule 46 (exp)


State 62

   41 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _DEC          shift, and go to state 57

    num_exp        go to state 80
    exp            go to state 59
    literal        go to state 60
    function_call  go to state 61


State 63

   38 inc_statement: _ID _INC . _SEMICOLON

    _SEMICOLON  shift, and go to state 81


State 64

   29 statement_list: statement_list . statement
   40 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _RBRACKET  shift, and go to state 82
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 41
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 65

   39 dec_statement: _DEC _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 83


State 66

   23 for: _FOR _LPAREN . _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement

    _TYPE  shift, and go to state 84


State 67

   25 jiro: _JIRO _ID . $@5 tranga _TOERANA statement _END_JIRO

    $default  reduce using rule 24 ($@5)

    $@5  go to state 85


State 68

   60 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 86
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 69

   21 vars: _ASSIGN literal .

    $default  reduce using rule 21 (vars)


State 70

   17 variable: _TYPE $@3 _ID vars _SEMICOLON .

    $default  reduce using rule 17 (variable)


State 71

   19 vars: vars _COMMA . _ID
   20     | vars _COMMA . _ID _ASSIGN literal

    _ID  shift, and go to state 87


State 72

   63 if_part: _IF _LPAREN @7 . rel_exp $@8 _RPAREN statement

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _DEC          shift, and go to state 57

    num_exp        go to state 88
    exp            go to state 59
    literal        go to state 60
    function_call  go to state 61
    rel_exp        go to state 89


State 73

   48 exp: _ID _INC .

    $default  reduce using rule 48 (exp)


State 74

   56 function_call: _ID $@6 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 90


State 75

   43 num_exp: num_exp . _AROP exp
   47 exp: _LPAREN num_exp . _RPAREN
   64 rel_exp: num_exp . _RELOP num_exp

    _RPAREN  shift, and go to state 91
    _AROP    shift, and go to state 79
    _RELOP   shift, and go to state 92


State 76

   50 exp: _LPAREN rel_exp . _RPAREN _QMARK izraz _COLON izraz

    _RPAREN  shift, and go to state 93


State 77

   49 exp: _DEC _ID .

    $default  reduce using rule 49 (exp)


State 78

   65 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 65 (return_statement)


State 79

   43 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _DEC          shift, and go to state 57

    exp            go to state 94
    literal        go to state 60
    function_call  go to state 61


State 80

   41 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   43 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 95
    _AROP       shift, and go to state 79


State 81

   38 inc_statement: _ID _INC _SEMICOLON .

    $default  reduce using rule 38 (inc_statement)


State 82

   40 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 40 (compound_statement)


State 83

   39 dec_statement: _DEC _ID _SEMICOLON .

    $default  reduce using rule 39 (dec_statement)


State 84

   23 for: _FOR _LPAREN _TYPE . _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement

    _ID  shift, and go to state 96


State 85

   25 jiro: _JIRO _ID $@5 . tranga _TOERANA statement _END_JIRO

    _TRANGA  shift, and go to state 97

    tranga  go to state 98


State 86

   60 if_statement: if_part _ELSE statement .

    $default  reduce using rule 60 (if_statement)


State 87

   19 vars: vars _COMMA _ID .
   20     | vars _COMMA _ID . _ASSIGN literal

    _ASSIGN  shift, and go to state 99

    $default  reduce using rule 19 (vars)


State 88

   43 num_exp: num_exp . _AROP exp
   64 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 79
    _RELOP  shift, and go to state 92


State 89

   63 if_part: _IF _LPAREN @7 rel_exp . $@8 _RPAREN statement

    $default  reduce using rule 62 ($@8)

    $@8  go to state 100


State 90

   56 function_call: _ID $@6 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _DEC          shift, and go to state 57

    $default  reduce using rule 57 (argument)

    num_exp        go to state 101
    exp            go to state 59
    literal        go to state 60
    function_call  go to state 61
    argument       go to state 102


State 91

   47 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 47 (exp)


State 92

   64 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 52
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54
    _LPAREN       shift, and go to state 55
    _DEC          shift, and go to state 57

    num_exp        go to state 103
    exp            go to state 59
    literal        go to state 60
    function_call  go to state 61


State 93

   50 exp: _LPAREN rel_exp _RPAREN . _QMARK izraz _COLON izraz

    _QMARK  shift, and go to state 104


State 94

   43 num_exp: num_exp _AROP exp .

    $default  reduce using rule 43 (num_exp)


State 95

   41 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 41 (assignment_statement)


State 96

   23 for: _FOR _LPAREN _TYPE _ID . _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement

    _ASSIGN  shift, and go to state 105


State 97

   26 tranga: _TRANGA . literal statement

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 106


State 98

   25 jiro: _JIRO _ID $@5 tranga . _TOERANA statement _END_JIRO
   27 tranga: tranga . _TRANGA literal statement

    _TRANGA   shift, and go to state 107
    _TOERANA  shift, and go to state 108


State 99

   20 vars: vars _COMMA _ID _ASSIGN . literal

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 109


State 100

   63 if_part: _IF _LPAREN @7 rel_exp $@8 . _RPAREN statement

    _RPAREN  shift, and go to state 110


State 101

   43 num_exp: num_exp . _AROP exp
   58 argument: num_exp .

    _AROP  shift, and go to state 79

    $default  reduce using rule 58 (argument)


State 102

   56 function_call: _ID $@6 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 111


State 103

   43 num_exp: num_exp . _AROP exp
   64 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 79

    $default  reduce using rule 64 (rel_exp)


State 104

   50 exp: _LPAREN rel_exp _RPAREN _QMARK . izraz _COLON izraz

    _ID           shift, and go to state 112
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    izraz    go to state 113
    literal  go to state 114


State 105

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN . literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 115


State 106

   26 tranga: _TRANGA literal . statement

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 116
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 107

   27 tranga: tranga _TRANGA . literal statement

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 117


State 108

   25 jiro: _JIRO _ID $@5 tranga _TOERANA . statement _END_JIRO

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 118
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 109

   20 vars: vars _COMMA _ID _ASSIGN literal .

    $default  reduce using rule 20 (vars)


State 110

   63 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN . statement

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 119
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 111

   56 function_call: _ID $@6 _LPAREN argument _RPAREN .

    $default  reduce using rule 56 (function_call)


State 112

   52 izraz: _ID .

    $default  reduce using rule 52 (izraz)


State 113

   50 exp: _LPAREN rel_exp _RPAREN _QMARK izraz . _COLON izraz

    _COLON  shift, and go to state 120


State 114

   51 izraz: literal .

    $default  reduce using rule 51 (izraz)


State 115

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal . _COLON literal _COLON _STEP literal _RPAREN $@4 statement

    _COLON  shift, and go to state 121


State 116

   26 tranga: _TRANGA literal statement .

    $default  reduce using rule 26 (tranga)


State 117

   27 tranga: tranga _TRANGA literal . statement

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 122
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 118

   25 jiro: _JIRO _ID $@5 tranga _TOERANA statement . _END_JIRO

    _END_JIRO  shift, and go to state 123


State 119

   63 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN statement .

    $default  reduce using rule 63 (if_part)


State 120

   50 exp: _LPAREN rel_exp _RPAREN _QMARK izraz _COLON . izraz

    _ID           shift, and go to state 112
    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    izraz    go to state 124
    literal  go to state 114


State 121

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON . literal _COLON _STEP literal _RPAREN $@4 statement

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 125


State 122

   27 tranga: tranga _TRANGA literal statement .

    $default  reduce using rule 27 (tranga)


State 123

   25 jiro: _JIRO _ID $@5 tranga _TOERANA statement _END_JIRO .

    $default  reduce using rule 25 (jiro)


State 124

   50 exp: _LPAREN rel_exp _RPAREN _QMARK izraz _COLON izraz .

    $default  reduce using rule 50 (exp)


State 125

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal . _COLON _STEP literal _RPAREN $@4 statement

    _COLON  shift, and go to state 126


State 126

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON . _STEP literal _RPAREN $@4 statement

    _STEP  shift, and go to state 127


State 127

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP . literal _RPAREN $@4 statement

    _INT_NUMBER   shift, and go to state 53
    _UINT_NUMBER  shift, and go to state 54

    literal  go to state 128


State 128

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal . _RPAREN $@4 statement

    _RPAREN  shift, and go to state 129


State 129

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN . $@4 statement

    $default  reduce using rule 22 ($@4)

    $@4  go to state 130


State 130

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 . statement

    _IF        shift, and go to state 31
    _RETURN    shift, and go to state 32
    _ID        shift, and go to state 33
    _LBRACKET  shift, and go to state 34
    _DEC       shift, and go to state 36
    _FOR       shift, and go to state 37
    _JIRO      shift, and go to state 38

    for                   go to state 39
    jiro                  go to state 40
    statement             go to state 131
    inc_statement         go to state 42
    dec_statement         go to state 43
    compound_statement    go to state 44
    assignment_statement  go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48


State 131

   23 for: _FOR _LPAREN _TYPE _ID _ASSIGN literal _COLON literal _COLON _STEP literal _RPAREN $@4 statement .

    $default  reduce using rule 23 (for)
